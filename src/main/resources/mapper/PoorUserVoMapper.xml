<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="springboot.dao.PoorUserVoMapper">
  <resultMap id="BaseResultMap" type="springboot.modal.vo.PoorUserVo">
    <id column="uid" jdbcType="INTEGER" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="mobile_phone" jdbcType="VARCHAR" property="mobilePhone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="id_number" jdbcType="VARCHAR" property="idNumber" />
    <result column="age" jdbcType="VARCHAR" property="age" />
    <result column="poor_reason" jdbcType="VARCHAR" property="poorReason" />
    <result column="outpoor_date" jdbcType="INTEGER" property="outpoorDate" />
    <result column="info_image" jdbcType="VARCHAR" property="infoImage" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="springboot.modal.vo.PoorUserVo">
    <result column="enjoy_policy" jdbcType="LONGVARCHAR" property="enjoyPolicy" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, username, email, mobile_phone, id_number, age,status, poor_reason, info_image, outpoor_date
  </sql>
  <sql id="Blob_Column_List">
    enjoy_policy
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="springboot.modal.vo.PoorUserVoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_poorusers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="springboot.modal.vo.PoorUserVoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_poorusers
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_poorusers
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_contents
    where cid = #{cid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="springboot.modal.vo.ContentVoExample">
    delete from t_contents
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="springboot.modal.vo.PoorUserVo" useGeneratedKeys="true" keyProperty="uid">
    insert into t_poorusers (uid, username, email,created,outpoor_date,
    mobile_phone,status,type,id_number,age,poor_reason,
    info_image, enjoy_policy)
    values (#{uid,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
    #{created,jdbcType=INTEGER}, #{outpoorDate,jdbcType=INTEGER},
    #{mobilePhone,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR},
    #{idNumber,jdbcType=VARCHAR},#{age,jdbcType=VARCHAR},#{poorReason,jdbcType=VARCHAR},
     #{infoImage,jdbcType=VARCHAR},#{enjoyPolicy,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="springboot.modal.vo.ContentVo" useGeneratedKeys="true" keyProperty="cid">
    insert into t_contents
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cid != null">
        cid,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="slug != null">
        slug,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="modified != null">
        modified,
      </if>
      <if test="authorId != null">
        author_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="tags != null">
        tags,
      </if>
      <if test="categories != null">
        categories,
      </if>
      <if test="hits != null">
        hits,
      </if>
      <if test="commentsNum != null">
        comments_num,
      </if>
      <if test="allowComment != null">
        allow_comment,
      </if>
      <if test="allowPing != null">
        allow_ping,
      </if>
      <if test="allowFeed != null">
        allow_feed,
      </if>
      <if test="thumbimg != null">
        thumbImg,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cid != null">
        #{cid,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="slug != null">
        #{slug,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
      <if test="modified != null">
        #{modified,jdbcType=INTEGER},
      </if>
      <if test="authorId != null">
        #{authorId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="tags != null">
        #{tags,jdbcType=VARCHAR},
      </if>
      <if test="categories != null">
        #{categories,jdbcType=VARCHAR},
      </if>
      <if test="hits != null">
        #{hits,jdbcType=INTEGER},
      </if>
      <if test="commentsNum != null">
        #{commentsNum,jdbcType=INTEGER},
      </if>
      <if test="allowComment != null">
        #{allowComment,jdbcType=BIT},
      </if>
      <if test="allowPing != null">
        #{allowPing,jdbcType=BIT},
      </if>
      <if test="allowFeed != null">
        #{allowFeed,jdbcType=BIT},
      </if>
      <if test="thumbimg != null">
        #{thumbimg,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="springboot.modal.vo.ContentVoExample" resultType="java.lang.Long">
    select count(*) from t_contents
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_contents
    <set>
      <if test="record.cid != null">
        cid = #{record.cid,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.slug != null">
        slug = #{record.slug,jdbcType=VARCHAR},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
      <if test="record.modified != null">
        modified = #{record.modified,jdbcType=INTEGER},
      </if>
      <if test="record.authorId != null">
        author_id = #{record.authorId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.tags != null">
        tags = #{record.tags,jdbcType=VARCHAR},
      </if>
      <if test="record.categories != null">
        categories = #{record.categories,jdbcType=VARCHAR},
      </if>
      <if test="record.hits != null">
        hits = #{record.hits,jdbcType=INTEGER},
      </if>
      <if test="record.commentsNum != null">
        comments_num = #{record.commentsNum,jdbcType=INTEGER},
      </if>
      <if test="record.allowComment != null">
        allow_comment = #{record.allowComment,jdbcType=BIT},
      </if>
      <if test="record.allowPing != null">
        allow_ping = #{record.allowPing,jdbcType=BIT},
      </if>
      <if test="record.allowFeed != null">
        allow_feed = #{record.allowFeed,jdbcType=BIT},
      </if>
      <if test="record.thumbimg != null">
        thumbImg = #{record.thumbimg,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update t_contents
    set cid = #{record.cid,jdbcType=INTEGER},
    title = #{record.title,jdbcType=VARCHAR},
    slug = #{record.slug,jdbcType=VARCHAR},
    created = #{record.created,jdbcType=INTEGER},
    modified = #{record.modified,jdbcType=INTEGER},
    author_id = #{record.authorId,jdbcType=INTEGER},
    type = #{record.type,jdbcType=VARCHAR},
    status = #{record.status,jdbcType=VARCHAR},
    tags = #{record.tags,jdbcType=VARCHAR},
    categories = #{record.categories,jdbcType=VARCHAR},
    hits = #{record.hits,jdbcType=INTEGER},
    comments_num = #{record.commentsNum,jdbcType=INTEGER},
    allow_comment = #{record.allowComment,jdbcType=BIT},
    allow_ping = #{record.allowPing,jdbcType=BIT},
    allow_feed = #{record.allowFeed,jdbcType=BIT},
    thumbImg = #{record.thumbimg,jdbcType=VARCHAR},
    content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_contents
    set cid = #{record.cid,jdbcType=INTEGER},
    title = #{record.title,jdbcType=VARCHAR},
    slug = #{record.slug,jdbcType=VARCHAR},
    created = #{record.created,jdbcType=INTEGER},
    modified = #{record.modified,jdbcType=INTEGER},
    author_id = #{record.authorId,jdbcType=INTEGER},
    type = #{record.type,jdbcType=VARCHAR},
    status = #{record.status,jdbcType=VARCHAR},
    tags = #{record.tags,jdbcType=VARCHAR},
    categories = #{record.categories,jdbcType=VARCHAR},
    hits = #{record.hits,jdbcType=INTEGER},
    comments_num = #{record.commentsNum,jdbcType=INTEGER},
    allow_comment = #{record.allowComment,jdbcType=BIT},
    allow_ping = #{record.allowPing,jdbcType=BIT},
    allow_feed = #{record.allowFeed,jdbcType=BIT},
    thumbImg = #{record.thumbimg,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="springboot.modal.vo.ContentVo">
    update t_poorusers
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="mobilePhone != null">
        mobile_phone = #{mobilePhone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="idNumber != null">
        id_number = #{idNumber,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=VARCHAR},
      </if>
      <if test="poorReason != null">
        poor_reason = #{poorReason,jdbcType=VARCHAR},
      </if>
      <if test="outpoorDate != null">
        outpoor_date = #{outpoorDate,jdbcType=INTEGER},
      </if>
      <if test="enjoyPolicy != null">
        enjoy_policy = #{enjoyPolicy,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="springboot.modal.vo.ContentVo">
    update t_contents
    set title = #{title,jdbcType=VARCHAR},
    slug = #{slug,jdbcType=VARCHAR},
    created = #{created,jdbcType=INTEGER},
    modified = #{modified,jdbcType=INTEGER},
    author_id = #{authorId,jdbcType=INTEGER},
    type = #{type,jdbcType=VARCHAR},
    status = #{status,jdbcType=VARCHAR},
    tags = #{tags,jdbcType=VARCHAR},
    categories = #{categories,jdbcType=VARCHAR},
    hits = #{hits,jdbcType=INTEGER},
    comments_num = #{commentsNum,jdbcType=INTEGER},
    allow_comment = #{allowComment,jdbcType=BIT},
    allow_ping = #{allowPing,jdbcType=BIT},
    allow_feed = #{allowFeed,jdbcType=BIT},
    thumbImg = #{thumbimg,jdbcType=VARCHAR},
    content = #{content,jdbcType=LONGVARCHAR}
    where cid = #{cid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="springboot.modal.vo.ContentVo">
    update t_contents
    set title = #{title,jdbcType=VARCHAR},
    slug = #{slug,jdbcType=VARCHAR},
    created = #{created,jdbcType=INTEGER},
    modified = #{modified,jdbcType=INTEGER},
    author_id = #{authorId,jdbcType=INTEGER},
    type = #{type,jdbcType=VARCHAR},
    status = #{status,jdbcType=VARCHAR},
    tags = #{tags,jdbcType=VARCHAR},
    categories = #{categories,jdbcType=VARCHAR},
    hits = #{hits,jdbcType=INTEGER},
    comments_num = #{commentsNum,jdbcType=INTEGER},
    allow_comment = #{allowComment,jdbcType=BIT},
    allow_ping = #{allowPing,jdbcType=BIT},
    allow_feed = #{allowFeed,jdbcType=BIT},
    thumbImg = #{thumbimg,jdbcType=VARCHAR}
    where cid = #{cid,jdbcType=INTEGER}
  </update>


  <resultMap id="archiveBoMap" type="springboot.modal.bo.ArchiveBo">
    <id column="date" property="date"/>
    <result column="count" property="count"/>
  </resultMap>

  <select id="findReturnArchiveBo" resultMap="archiveBoMap">
    select FROM_UNIXTIME(created, '%Y年%m月') as date, count(*) as count from t_contents where type = 'post' and status = 'publish' group by date order by date desc
  </select>


  <select id="findByCatalog" resultMap="BaseResultMap" parameterType="Integer">
    select a.*
    from t_contents a left join t_relationships b on a.cid = b.cid
    where b.mid = #{value} and a.status = 'publish' and a.type = 'post'
    order by a.created desc
  </select>
</mapper>